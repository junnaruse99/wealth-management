{"version":3,"sources":["components/Error.js","components/Question.js","components/Form.js","components/List.js","helpers.js","components/BudgetManagement.js","App.js","reportWebVitals.js","index.js"],"names":["Error","message","className","Question","saveBudget","saveRemaining","updateQuestion","useState","number","saveNumber","error","saveError","onSubmit","e","preventDefault","isNaN","type","placeholder","onChange","parseInt","target","value","Form","expenses","updateExpenses","name","saveName","quantity","saveQuantity","updateError","trim","expense","id","shortid","generate","List","map","checkBudget","budget","remaining","color","BudgetManagement","App","question","useEffect","length","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.269c909e.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst Error = ( {message} ) => (\n    <p className=\"alert alert-danger error\">{message}</p>\n);\n\nError.propTypes = {\n    message: PropTypes.string.isRequired\n}\n\n \nexport default Error;","import React, { useState } from 'react';\nimport Error from './Error'\nimport PropTypes from 'prop-types'\n\nconst Question = ({ saveBudget, saveRemaining, updateQuestion }) => {\n\n\n    // Keep track of number\n    const [ number, saveNumber ] = useState(0);\n\n    // For authentication\n    const [ error, saveError ] = useState(false);\n\n    // Submit number\n    const addNumber = e => {\n        e.preventDefault();\n\n        // Validate\n        if( number < 1 || isNaN(number) ) {\n            saveError(true);\n            return;\n        }\n        \n        // If validation is passed\n        saveError(false);\n        saveBudget(number);\n        saveRemaining(number);\n        updateQuestion(false);\n    }\n\n    return ( \n        <>\n            <h2>Insert budget</h2>\n\n            {error ? <Error message=\"The number is incorrect\"/>: null }\n            <form\n                onSubmit={addNumber}\n            >\n                <div className=\"form-group\">\n                    <input\n                        type=\"number\"\n                        className=\"form-control\"\n                        placeholder=\"Insert your budget\"\n                        onChange={ e => saveNumber(parseInt(e.target.value)) }\n                    >\n                    </input>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n            </form>\n        </>\n     );\n}\n\nQuestion.propTypes = {\n    saveBudget: PropTypes.func.isRequired,\n    saveRemaining: PropTypes.func.isRequired,\n    updateQuestion: PropTypes.func.isRequired\n}\n \nexport default Question\n","import React, { useState } from 'react';\nimport Error from './Error'\nimport shortid from 'shortid';\nimport PropTypes from 'prop-types'\n                    \nconst Form = ( {expenses, updateExpenses} ) => {\n    \n    // Keep track of fields\n    const [ name, saveName ] = useState('');\n    const [ quantity, saveQuantity ] = useState(0);\n\n    // For authentication\n    const [ error, updateError ] = useState(false);\n\n    // Submit form\n    const addExpense = e => {\n        e.preventDefault();\n\n        // Validate\n        if( name.trim() === \"\" || quantity < 1 || isNaN(quantity) ) {\n            updateError(true);\n            return;\n        }\n\n        // If validation is passed\n        updateError(false);\n\n        // Build expense\n        const expense = {\n            name,\n            quantity,\n            id: shortid.generate()\n        }\n\n        updateExpenses( [...expenses, expense] )\n\n        // Clean all fields\n        saveName('');\n        saveQuantity(0);\n\n    }\n\n    return ( \n        <>\n            <h2>Add here your expenses</h2>\n\n            { error ? <Error message=\"Both fields are mandatory and Expense Amount must be positive\" /> : null }\n\n            <form\n                onSubmit={addExpense}\n            >\n                <div className=\"form-group\">\n                    <div className=\"camp\">\n                        <label>Expense name</label>\n                        <input\n                            type=\"text\"\n                            className=\"form-control\"\n                            placeholder=\"Ex. Transportation\"\n                            value={name}\n                            onChange={e => saveName(e.target.value)}\n                        />\n                    </div>\n                </div>\n                <div className=\"form-group\">\n                    <div className=\"camp\">\n                        <label>Expense Amount</label>\n                        <input\n                            type=\"number\"\n                            className=\"form-control\"\n                            placeholder=\"Ex. 300\"\n                            value={quantity}\n                            onChange={ e => saveQuantity(parseInt(e.target.value)) }\n                        />\n                    </div>\n                </div>\n\n                <button type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button>\n            </form>\n        </>\n     );\n}\n\nForm.propTypes = {\n    expenses: PropTypes.array.isRequired,\n    updateExpenses: PropTypes.func.isRequired\n}\n\nexport default Form;","import React from 'react';\nimport PropTypes from 'prop-types'\n\nconst List = ( {expenses} ) => (\n    <div className=\"expenses\">\n        <h2>List</h2>\n        {expenses.map( expense => (\n            <li key={expense.id}>\n                <p>\n                    {expense.name}\n                    <span className=\"expense\">$ {expense.quantity}</span>\n                </p>\n            </li>\n        ))}\n    </div>\n)\n\nList.propTypes = {\n    expenses: PropTypes.array.isRequired\n}\n \nexport default List;","export const checkBudget = ( budget, remaining ) => {\n    let color = 'alert ';\n\n    if( (budget*0.25) > remaining ) {\n        color += 'alert-danger';\n    }\n    else if ( (budget*0.5) > remaining ) {\n        color += 'alert-warning';\n    }\n    else {\n        color += 'alert-success';\n    }\n\n    return color;\n}","import { checkBudget } from '../helpers'\nimport PropTypes from 'prop-types'\n\nconst BudgetManagement = ( {budget, remaining} ) => {\n    return ( \n        <>\n            <div className=\"alert alert-primary\">\n                Budget: $ {budget}\n            </div>\n            <div className={checkBudget(budget, remaining)}>\n                Remaining: $ {remaining}\n            </div>\n        </>\n     );\n}\n\nBudgetManagement.propTypes = {\n    budget: PropTypes.number.isRequired,\n    remaining: PropTypes.number.isRequired\n}\n \nexport default BudgetManagement;","import React, { useState, useEffect } from 'react';\nimport Question from './components/Question'\nimport Form from './components/Form'\nimport List from './components/List'\nimport BudgetManagement from './components/BudgetManagement'\n\nfunction App() {\n\n  // Define budget and remaining\n  const [ budget, saveBudget ] = useState(0);\n  const [ remaining, saveRemaining ] = useState(0);\n  const [ question, updateQuestion ] = useState(true);\n\n  // Define all expenses\n  const [ expenses, updateExpenses ] = useState([]);\n\n\n  // Determine when there is a new expense for updating the remaining\n  useEffect( () => {\n    if (expenses.length != 0) {\n      saveRemaining(remaining - expenses[expenses.length - 1].quantity);\n    }\n  }, [expenses]);\n\n  return (\n    <>\n      <header>\n        <h1>Weekly expenses</h1>\n      </header>\n\n      <div className=\"container\">\n        <div className=\"principal-content content\">\n          { question \n          ? (\n              <Question \n                saveBudget={saveBudget}\n                saveRemaining={saveRemaining}\n                updateQuestion={updateQuestion}\n              />\n            )\n          : (\n              <div className=\"row\">\n                <div className=\"col-12 col-md-6\">\n                  <Form\n                    expenses={expenses} \n                    updateExpenses={updateExpenses}\n                  />\n                </div>\n                <div className=\"col-12 col-md-6\">\n                  <List \n                    expenses={expenses}\n                  />\n                  <BudgetManagement\n                    budget={budget}\n                    remaining={remaining}\n                  />\n                </div>\n              </div>\n            )\n          }  \n        </div> \n      </div>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}